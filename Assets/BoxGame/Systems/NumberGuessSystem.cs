// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace BoxGame {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.ECS;
    using UniRx;
    
    
    [uFrame.Attributes.uFrameIdentifier("09539e08-5c80-4cf7-a71b-e6c71c16881f")]
    public partial class NumberGuessSystem : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<GuessLabel> _GuessLabelManager;
        
        private IEcsComponentManagerOf<LowerButton> _LowerButtonManager;
        
        private IEcsComponentManagerOf<HigherButton> _HigherButtonManager;
        
        private IEcsComponentManagerOf<Box> _BoxManager;
        
        private GuessedHigherHandler GuessedHigherHandlerInstance = new GuessedHigherHandler();
        
        private LowerButtonClickedHandler LowerButtonClickedHandlerInstance = new LowerButtonClickedHandler();
        
        private NumberGuessSystemHigherEventHandler NumberGuessSystemHigherEventHandlerInstance = new NumberGuessSystemHigherEventHandler();
        
        private GuessedLowerHandler GuessedLowerHandlerInstance = new GuessedLowerHandler();
        
        private HigherButtonClickedHandler HigherButtonClickedHandlerInstance = new HigherButtonClickedHandler();
        
        private GuessLabelReadyHandler GuessLabelReadyHandlerInstance = new GuessLabelReadyHandler();
        
        private GuessLabelguessPropertyChanged GuessLabelguessPropertyChangedInstance = new GuessLabelguessPropertyChanged();
        
        private PerformGuessHandler PerformGuessHandlerInstance = new PerformGuessHandler();
        
        public IEcsComponentManagerOf<GuessLabel> GuessLabelManager {
            get {
                return _GuessLabelManager;
            }
            set {
                _GuessLabelManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LowerButton> LowerButtonManager {
            get {
                return _LowerButtonManager;
            }
            set {
                _LowerButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<HigherButton> HigherButtonManager {
            get {
                return _HigherButtonManager;
            }
            set {
                _HigherButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Box> BoxManager {
            get {
                return _BoxManager;
            }
            set {
                _BoxManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            GuessLabelManager = ComponentSystem.RegisterComponent<GuessLabel>();
            LowerButtonManager = ComponentSystem.RegisterComponent<LowerButton>();
            HigherButtonManager = ComponentSystem.RegisterComponent<HigherButton>();
            BoxManager = ComponentSystem.RegisterComponent<Box>();
            this.OnEvent<BoxGame.HigherEvent>().Subscribe(_=>{ GuessedHigherFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.PointerClickDispatcher>().Subscribe(_=>{ LowerButtonClickedFilter(_); }).DisposeWith(this);
            this.OnEvent<BoxGame.HigherEvent>().Subscribe(_=>{ NumberGuessSystemHigherEventFilter(_); }).DisposeWith(this);
            this.OnEvent<BoxGame.LowerEvent>().Subscribe(_=>{ GuessedLowerFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.PointerClickDispatcher>().Subscribe(_=>{ HigherButtonClickedFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.Kernel.GameReadyEvent>().Subscribe(_=>{ GuessLabelReadyFilter(_); }).DisposeWith(this);
            this.PropertyChanged<GuessLabel,Int32>(Group=>Group.guessObservable, GuessLabelguessPropertyChangedFilter, Group=>Group.guess);
            this.OnEvent<BoxGame.GuessEvent>().Subscribe(_=>{ PerformGuessFilter(_); }).DisposeWith(this);
        }
        
        protected void GuessedHigherHandler(BoxGame.HigherEvent data, GuessLabel group) {
            var handler = GuessedHigherHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void GuessedHigherFilter(BoxGame.HigherEvent data) {
            var GuessLabelItems = GuessLabelManager.Components;
            for (var GuessLabelIndex = 0
            ; GuessLabelIndex < GuessLabelItems.Count; GuessLabelIndex++
            ) {
                this.GuessedHigherHandler(data, GuessLabelItems[GuessLabelIndex]);
            }
        }
        
        protected void LowerButtonClickedHandler(uFrame.ECS.PointerClickDispatcher data, LowerButton source) {
            var handler = LowerButtonClickedHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Source = source;
            handler.Execute();
        }
        
        protected void LowerButtonClickedFilter(uFrame.ECS.PointerClickDispatcher data) {
            var SourceLowerButton = LowerButtonManager[data.EntityId];
            if (SourceLowerButton == null) {
                return;
            }
            this.LowerButtonClickedHandler(data, SourceLowerButton);
        }
        
        protected void NumberGuessSystemHigherEventHandler(BoxGame.HigherEvent data) {
            var handler = NumberGuessSystemHigherEventHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Execute();
        }
        
        protected void NumberGuessSystemHigherEventFilter(BoxGame.HigherEvent data) {
            this.NumberGuessSystemHigherEventHandler(data);
        }
        
        protected void GuessedLowerHandler(BoxGame.LowerEvent data, GuessLabel group) {
            var handler = GuessedLowerHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void GuessedLowerFilter(BoxGame.LowerEvent data) {
            var GuessLabelItems = GuessLabelManager.Components;
            for (var GuessLabelIndex = 0
            ; GuessLabelIndex < GuessLabelItems.Count; GuessLabelIndex++
            ) {
                this.GuessedLowerHandler(data, GuessLabelItems[GuessLabelIndex]);
            }
        }
        
        protected void HigherButtonClickedHandler(uFrame.ECS.PointerClickDispatcher data, HigherButton source) {
            var handler = HigherButtonClickedHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Source = source;
            handler.Execute();
        }
        
        protected void HigherButtonClickedFilter(uFrame.ECS.PointerClickDispatcher data) {
            var SourceHigherButton = HigherButtonManager[data.EntityId];
            if (SourceHigherButton == null) {
                return;
            }
            this.HigherButtonClickedHandler(data, SourceHigherButton);
        }
        
        protected void GuessLabelReadyHandler(uFrame.Kernel.GameReadyEvent data, GuessLabel group) {
            var handler = GuessLabelReadyHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void GuessLabelReadyFilter(uFrame.Kernel.GameReadyEvent data) {
            var GuessLabelItems = GuessLabelManager.Components;
            for (var GuessLabelIndex = 0
            ; GuessLabelIndex < GuessLabelItems.Count; GuessLabelIndex++
            ) {
                this.GuessLabelReadyHandler(data, GuessLabelItems[GuessLabelIndex]);
            }
        }
        
        protected void GuessLabelguessPropertyChanged(GuessLabel data, GuessLabel group, Int32 value) {
            var handler = GuessLabelguessPropertyChangedInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void GuessLabelguessPropertyChangedFilter(GuessLabel data, Int32 value) {
            var GroupGuessLabel = GuessLabelManager[data.EntityId];
            if (GroupGuessLabel == null) {
                return;
            }
            this.GuessLabelguessPropertyChanged(data, GroupGuessLabel, value);
        }
        
        protected void PerformGuessHandler(BoxGame.GuessEvent data, GuessLabel group) {
            var handler = PerformGuessHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void PerformGuessFilter(BoxGame.GuessEvent data) {
            var GuessLabelItems = GuessLabelManager.Components;
            for (var GuessLabelIndex = 0
            ; GuessLabelIndex < GuessLabelItems.Count; GuessLabelIndex++
            ) {
                this.PerformGuessHandler(data, GuessLabelItems[GuessLabelIndex]);
            }
        }
    }
}
