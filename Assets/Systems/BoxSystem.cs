// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace TestGame {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.ECS;
    using UniRx;
    
    
    [uFrame.Attributes.uFrameIdentifier("57981847-6cd8-4a54-9c9d-f0c1c1ba8163")]
    public partial class BoxSystem : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<Box> _BoxManager;
        
        private GameReadyEventHandler GameReadyEventHandlerInstance = new GameReadyEventHandler();
        
        private BoxnamePropertyChanged BoxnamePropertyChangedInstance = new BoxnamePropertyChanged();
        
        public IEcsComponentManagerOf<Box> BoxManager {
            get {
                return _BoxManager;
            }
            set {
                _BoxManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            BoxManager = ComponentSystem.RegisterComponent<Box>();
            this.OnEvent<uFrame.Kernel.GameReadyEvent>().Subscribe(_=>{ GameReadyEventFilter(_); }).DisposeWith(this);
            this.PropertyChanged<Box,String>(Group=>Group.nameObservable, BoxnamePropertyChangedFilter);
        }
        
        protected void GameReadyEventHandler(uFrame.Kernel.GameReadyEvent data, Box group) {
            var handler = GameReadyEventHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void GameReadyEventFilter(uFrame.Kernel.GameReadyEvent data) {
            var BoxItems = BoxManager.Components;
            for (var BoxIndex = 0
            ; BoxIndex < BoxItems.Count; BoxIndex++
            ) {
                this.GameReadyEventHandler(data, BoxItems[BoxIndex]);
            }
        }
        
        protected void BoxnamePropertyChanged(Box data, Box group, String value) {
            var handler = BoxnamePropertyChangedInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void BoxnamePropertyChangedFilter(Box data, String value) {
            var GroupBox = BoxManager[data.EntityId];
            if (GroupBox == null) {
                return;
            }
            this.BoxnamePropertyChanged(data, GroupBox, value);
        }
    }
}
